// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clerkId String                      @unique
  email   String                      @unique
  entries TransportationActivityLog[]
}

model TransportationActivityLog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id]) //this creates a relationship with another table. primary key -> foreign key ..... need to set up relationship on both sides (entries ActivityLog)

  activityType    String? // Type of activity (e.g., "transportation", "energy", etc.)
  date            DateTime? // Date of the activity
  distance        Float? // Distance covered in the activity (e.g., kilometers for transportation)
  carbonFootprint Float? // Carbon footprint of the activity in kg CO2
  note            String?   @db.Text

  analysis Analysis? // Optional analysis for the activity log (optional because you cant have an analysis without an activity log)

  @@unique([userId, id]) // Ensures that each user can have only one entry with the same ID
}

model Analysis {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logId String
  log   TransportationActivityLog @relation(fields: [logId], references: [id]) // This creates a relationship with the TransportationActivityLog model

  total           Float?
  goal            Float?
  progress        Float?
  progressPercent Float?
  summary         String? @db.Text
  color           String?
  recommendation  String?

  @@unique([logId])
}
